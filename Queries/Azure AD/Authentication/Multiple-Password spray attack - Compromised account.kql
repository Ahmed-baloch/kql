// This rule checks other security alerts related to password spray activity, and gathers the IP addresses in the Entities of these alerts, that are presumably malicious.
// This rule detects if these IP addresses have successful (or partially successful) authentication activity, before and after the password spray occurred.
// This rule excludes the accounts that were already identified as compromised in the last day in the password spray alerts, to reduce noise.
let query_frequency = 1h;
let query_period = 14d;
let exclude_accounts_period = 1d;
let _MonitoredRuleIds = toscalar(
    _GetWatchlist('AlertName-MonitoredDetections')
    | where Notes has "[PasswordSpray]"
    | summarize make_list(AnalyticsId)
);
let _EmailAddressRegex = toscalar(
    _GetWatchlist('RegEx-SingleRegularExpressions')
    | where UseCase == "EmailAddress"
    | project RegEx
);
let _ExternalEmailAddressRegex = toscalar(
    _GetWatchlist('RegEx-SingleRegularExpressions')
    | where UseCase == "ExternalEmailAddress"
    | project RegEx
);
let _ExcludedResultTypes = toscalar(
    _GetWatchlist('ResultType-SignInLogsErrorCodes')
    | where Notes has "[Failure]" and not(Notes has_any ("[Expired]", "[Success]")) and isnotempty(ResultDescription)
    | summarize make_list(ResultType)
);
let _Alerts = (start_time: datetime, end_time: datetime) {
    SecurityAlert
    | where TimeGenerated between(start_time .. end_time)
    | where AlertType has_any (_MonitoredRuleIds)
    | mv-expand Entity = todynamic(Entities)
    | project TimeGenerated, Entity
};
let _AlertAddresses = (T: (TimeGenerated: datetime, Entity: dynamic)) {toscalar(
    T
    | where Entity["Type"] == "ip"
    | extend IPAddress = strcat(tostring(Entity["Address"]), iff(bag_has_key(Entity, "AddressScope"), strcat("/", tostring(Entity["AddressScope"])), ""))
    | distinct IPAddress
    | where not(isempty(parse_ipv6(IPAddress)) or ipv4_is_private(IPAddress))
    | summarize make_list(IPAddress)
)};
// Password spray alerts should contain account entities only if they were compromised
// This function should return only the most recent compromised accounts (in the last day), so they can be excluded in this query
let _AlertAccounts = (T: (TimeGenerated: datetime, Entity: dynamic)) {toscalar(
    T
    | where TimeGenerated > ago(exclude_accounts_period)
    | extend
        EntityName = tostring(Entity.Name),
        EntityUPNSuffix = tostring(Entity.UPNSuffix)
    | extend EntityUPN = tolower(iff(isnotempty(EntityUPNSuffix), strcat(EntityName, "@", EntityUPNSuffix), ""))
    | as _Info
    | extend EntityEmail = todynamic(dynamic_to_json(extract_all(_EmailAddressRegex, dynamic([1]), tolower(strcat(tostring(toscalar(_Info | summarize make_set_if(EntityUPN, isnotempty(EntityUPN)))), Entity)))))
    | mv-expand EntityEmail
    | extend EntityEmail = tostring(EntityEmail[0])
    | where isnotempty(EntityEmail)
    | extend EntityEmail = case(
        EntityEmail has "#EXT#", replace_regex(EntityEmail, _ExternalEmailAddressRegex, @"\2@\3"),
        EntityEmail startswith "live.com#" or EntityEmail startswith "guest#", replace_regex(EntityEmail, strcat(@"(?:live\.com#|guest#)", _EmailAddressRegex), @"\2@\3"),
        EntityEmail
        )
    | summarize make_list(EntityEmail)
)};
// Past alerts information (from 14 days ago until 1 hour ago)
let _Past_Alerts = _Alerts(ago(query_period), ago(query_frequency));
let _Past_AlertAddresses = _AlertAddresses(_Past_Alerts);
let _Past_AlertAccounts = _AlertAccounts(_Past_Alerts); // Only accounts from the last day
// Current alerts information (from 1 hour ago until now)
let _Current_Alerts = _Alerts(ago(query_frequency), now());
let _Current_AlertAddresses = _AlertAddresses(_Current_Alerts);
let _Current_AlertAccounts = _AlertAccounts(_Current_Alerts); // Only accounts from the last day
// Query current activity that matches past alerts
let _Current_Activity =
    union
        (ADFSSignInLogs
        | where ingestion_time() between (ago(query_frequency) .. now())
        | where array_length(_Past_AlertAddresses) > 0
            and not(ResultType in (_ExcludedResultTypes))
            and ipv6_is_in_any_range(IPAddress, _Past_AlertAddresses)
        | where not(todynamic(AuthenticationDetails)[0].authenticationMethod == "Integrated Windows Authentication")
        ),
        (SigninLogs
        | where TimeGenerated > ago(query_frequency)
        | where array_length(_Past_AlertAddresses) > 0
            and not(ResultType in (_ExcludedResultTypes))
            and ipv6_is_in_any_range(IPAddress, _Past_AlertAddresses)
        | extend
            DeviceDetail = tostring(DeviceDetail),
            ConditionalAccessPolicies = tostring(ConditionalAccessPolicies)
        ),
        (AADNonInteractiveUserSignInLogs
        | where TimeGenerated > ago(query_frequency)
        | where array_length(_Past_AlertAddresses) > 0
            and not(ResultType in (_ExcludedResultTypes))
            and ipv6_is_in_any_range(IPAddress, _Past_AlertAddresses)
        )
    // Exclude accounts compromised in the last day
    | where not(UserPrincipalName in (_Past_AlertAccounts))
    | summarize arg_min(TimeGenerated, *) by IPAddress, UserId
;
let _Past_Activity =
    union
        (ADFSSignInLogs
        | where TimeGenerated > ago(query_period)
        | where array_length(_Current_AlertAddresses) > 0
            and not(ResultType in (_ExcludedResultTypes))
            and ipv6_is_in_any_range(IPAddress, _Current_AlertAddresses)
        | where not(todynamic(AuthenticationDetails)[0].authenticationMethod == "Integrated Windows Authentication")
        ),
        (SigninLogs
        | where TimeGenerated > ago(query_period)
        | where array_length(_Current_AlertAddresses) > 0
            and not(ResultType in (_ExcludedResultTypes))
            and ipv6_is_in_any_range(IPAddress, _Current_AlertAddresses)
        | extend
            DeviceDetail = tostring(DeviceDetail),
            ConditionalAccessPolicies = tostring(ConditionalAccessPolicies)
        ),
        (AADNonInteractiveUserSignInLogs
        | where TimeGenerated > ago(query_period)
        | where array_length(_Current_AlertAddresses) > 0
            and not(ResultType in (_ExcludedResultTypes))
            and ipv6_is_in_any_range(IPAddress, _Current_AlertAddresses)
        )
    // Exclude accounts compromised in the last day
    | where not(UserPrincipalName in (_Current_AlertAccounts))
    | summarize arg_min(TimeGenerated, *) by IPAddress, UserId
;
union _Current_Activity, _Past_Activity
| project
    TimeGenerated,
    Type,
    UserPrincipalName,
    UserDisplayName,
    IPAddress,
    Location,
    ResultType,
    ResultDescription,
    ClientAppUsed,
    AppDisplayName,
    ResourceDisplayName,
    DeviceDetail,
    UserAgent,
    AuthenticationDetails,
    ConditionalAccessPolicies,
    RiskState,
    RiskEventTypes,
    RiskLevelDuringSignIn,
    RiskLevelAggregated,
    UserId,
    OriginalRequestId,
    CorrelationId
